import { Column, Entity, Index, JoinColumn, ManyToOne, OneToOne } from 'typeorm';
import { AbstractEntity }                                         from '@shared/domain/entities/abstract.entity';
import { ChecklistExecutionEntity }                               from './checklist-execution.entity';
import { UserEntity }                                             from '@modules/users/domain/entities/user.entity';
import { VehicleEntity }                                          from '@modules/logistics/fleet-management/domain/entities/vehicle.entity';

export enum IncidentSeverity {
  LOW = 'low',
  MEDIUM = 'medium',
  HIGH = 'high',
  CRITICAL = 'critical'
}

export enum IncidentStatus {
  OPEN = 'open',
  IN_PROGRESS = 'in_progress',
  RESOLVED = 'resolved',
  CLOSED = 'closed'
}

@Entity('incident')
export class IncidentEntity extends AbstractEntity {
  @Column({name: 'execution_id'})
  executionId: string;

  @OneToOne(() => ChecklistExecutionEntity, (execution) => execution.incident)
  @JoinColumn({name: 'execution_id'})
  execution: ChecklistExecutionEntity;

  @Column()
  title: string;

  @Column({type: 'text'})
  description: string;

  @Column({
    type: 'enum',
    enum: IncidentSeverity,
    default: IncidentSeverity.MEDIUM
  })
  @Index()
  severity: IncidentSeverity;

  @Column({
    type: 'enum',
    enum: IncidentStatus,
    default: IncidentStatus.OPEN
  })
  @Index()
  status: IncidentStatus;

  @Column({
    type: 'decimal',
    precision: 5,
    scale: 2,
    name: 'performance_score'
  })
  performanceScore: number;

  @Column({
    type: 'decimal',
    precision: 5,
    scale: 2,
    name: 'threshold_score'
  })
  thresholdScore: number;

  @Column({name: 'vehicle_id'})
  vehicleId: string;

  @ManyToOne(() => VehicleEntity)
  @JoinColumn({name: 'vehicle_id'})
  vehicle: VehicleEntity;

  @Column({name: 'reported_by_user_id'})
  reportedByUserId: string;

  @ManyToOne(() => UserEntity)
  @JoinColumn({name: 'reported_by_user_id'})
  reportedByUser: UserEntity;

  @Column({name: 'assigned_to_user_id', nullable: true})
  assignedToUserId: string;

  @ManyToOne(() => UserEntity, {nullable: true})
  @JoinColumn({name: 'assigned_to_user_id'})
  assignedToUser: UserEntity;

  @Column({type: 'timestamp with time zone', name: 'reported_at'})
  @Index()
  reportedAt: Date;

  @Column({type: 'timestamp with time zone', nullable: true, name: 'resolved_at'})
  resolvedAt: Date;

  @Column({type: 'text', nullable: true, name: 'resolution_notes'})
  resolutionNotes: string;

  @Column('simple-array', {nullable: true, name: 'failed_categories'})
  failedCategories: string[];

  @Column({type: 'integer', default: 0, name: 'follow_up_count'})
  followUpCount: number;

  @Column({type: 'boolean', default: false, name: 'auto_generated'})
  @Index()
  autoGenerated: boolean;
}
